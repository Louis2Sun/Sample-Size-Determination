AUC_trainft = numeric()
# AUC_trainft_RF = numeric()
# AUC_trainft_SVM = numeric()
# AUC_trainft_XGB = numeric()
for (j in 1:num_of_train_set){
AUC_tfs = c(AUC_tfs, c(t(auc_tfs[,,j,i][1:num_of_seeds_show,])))
# AUC_tfs_RF = c(AUC_tfs_RF, c(t(auc_tfs_RF[,,j][1:num_of_seeds_show,])))
# AUC_tfs_SVM = c(AUC_tfs_SVM, c(t(auc_tfs_svm[,,j][1:num_of_seeds_show,])))
# AUC_tfs_XGB = c(AUC_tfs_XGB, c(t(auc_tfs_xgb[,,j][1:num_of_seeds_show,])))
AUC_trainft = c(AUC_trainft, c(t(auc_trainft[,,j,i][1:num_of_seeds_show,])))
# AUC_trainft_RF = c(AUC_trainft_RF, c(t(auc_trainft_RF[,,j][1:num_of_seeds_show,])))
# AUC_trainft_SVM = c(AUC_trainft_SVM, c(t(auc_trainft_svm[,,j][1:num_of_seeds_show,])))
# AUC_trainft_XGB = c(AUC_trainft_XGB, c(t(auc_trainft_xgb[,,j][1:num_of_seeds_show,])))
}
auc_tfs_df<-data.frame(
AUC_tfs=AUC_tfs,
# AUC_tfs_RF=AUC_tfs_RF,
# AUC_tfs_svm=AUC_tfs_SVM,
# AUC_tfs_xgb=AUC_tfs_XGB,
Seed=as.factor(rep(seed,each=100)),
Class=as.factor(rep(group,each=num_of_seeds_show*100))
)
seed=rep(c(1:num_of_seeds_show),num_of_train_set)
AUC_tfs = numeric()
AUC_trainft = numeric()
for (j in 1:num_of_train_set){
AUC_tfs = c(AUC_tfs, c(t(auc_tfs[,,j,i][1:num_of_seeds_show,])))
# AUC_tfs_RF = c(AUC_tfs_RF, c(t(auc_tfs_RF[,,j][1:num_of_seeds_show,])))
# AUC_tfs_SVM = c(AUC_tfs_SVM, c(t(auc_tfs_svm[,,j][1:num_of_seeds_show,])))
# AUC_tfs_XGB = c(AUC_tfs_XGB, c(t(auc_tfs_xgb[,,j][1:num_of_seeds_show,])))
AUC_trainft = c(AUC_trainft, c(t(auc_trainft[,,j,i][1:num_of_seeds_show,])))
# AUC_trainft_RF = c(AUC_trainft_RF, c(t(auc_trainft_RF[,,j][1:num_of_seeds_show,])))
# AUC_trainft_SVM = c(AUC_trainft_SVM, c(t(auc_trainft_svm[,,j][1:num_of_seeds_show,])))
# AUC_trainft_XGB = c(AUC_trainft_XGB, c(t(auc_trainft_xgb[,,j][1:num_of_seeds_show,])))
}
auc_tfs_df<-data.frame(
AUC_tfs=AUC_tfs,
# AUC_tfs_RF=AUC_tfs_RF,
# AUC_tfs_svm=AUC_tfs_SVM,
# AUC_tfs_xgb=AUC_tfs_XGB,
Seed=as.factor(rep(seed,each=100)),
Class=as.factor(rep(group,each=num_of_seeds_show*100))
)
group = n_train_sets
auc_tfs_df<-data.frame(
AUC_tfs=AUC_tfs,
# AUC_tfs_RF=AUC_tfs_RF,
# AUC_tfs_svm=AUC_tfs_SVM,
# AUC_tfs_xgb=AUC_tfs_XGB,
Seed=as.factor(rep(seed,each=100)),
Class=as.factor(rep(group,each=num_of_seeds_show*100))
)
library(SSD)
getwd()
n_train_sets = c(15,30,60,120,150)
model=c("svm","randomforest")
library(SSD)
load("D:/Dropbox/USC/RA/2020summer/R Package/Sample-Size-Determination/auc_res.Rdata")
calculate_std_of_AUC_and_draw_plot(res,n_train_sets=n_train_sets, model=model)
library(SSD)
n_train_sets = c(15,30,60,120,150)
model=c("svm","randomforest")
library(SSD)
load("D:/Dropbox/USC/RA/2020summer/R Package/Sample-Size-Determination/auc_res.Rdata")
calculate_std_of_AUC_and_draw_plot(res,n_train_sets=n_train_sets, model=model)
calculate_AUCs(n01_p=15, n_train_sets = c(15,30,60,120,150), n01_test=300, num_of_seeds=20, random_seeds=TRUE, seeds=NULL, calculate_std_of_AUC_and_produce_plot=FALSE, method="pca2_mvnorm", ncores = NULL, model=c("svm","randomforest","logistic","lda","tree"))
load("D:/Dropbox/USC/RA/2020summer/R Package/Sample-Size-Determination/auc_res.Rdata")
n_train_sets = c(15,30,60,120,150)
# model=c("svm","randomforest")
model=c("svm","randomforest","logistic","lda","tree")
calculate_std_of_AUC_and_draw_plot(res,n_train_sets=n_train_sets, model=model)
calculate_AUCs(n01_p=15, n_train_sets = c(15,30,60,120,150), n01_test=300, num_of_seeds=20, random_seeds=TRUE, seeds=NULL, calculate_std_of_AUC_and_produce_plot=FALSE, method="pca2_mvnorm", ncores = NULL, model=c("svm","randomforest","logistic","lda","tree"))
calculate_std_of_AUC_and_draw_plot(res,n_train_sets=n_train_sets, model=model)
warning
warning()
calculate_AUCs(n01_p=15, n_train_sets = c(15,30,60,120,150), n01_test=300, num_of_seeds=50, random_seeds=FALSE, seeds=NULL, calculate_std_of_AUC_and_produce_plot=TRUE, method="pca2_mvnorm", ncores = NULL, model=c("svm","randomforest","logistic","lda","tree"))
install_github
install.packages("devtools")
library(devtools)
install_github("ShudongSun/Sample-Size-Determination")
n_train_sets = c(15,30,60,120,150)
# model=c("svm","randomforest")
model=c("svm","randomforest","logistic","lda","tree")
library(SSD)
calculate_AUCs(n01_p=15, n_train_sets = c(15,30,60,120,150), n01_test=300, num_of_seeds=30, random_seeds=TRUE, seeds=NULL, calculate_std_of_AUC_and_produce_plot=TRUE, method="gaussian_copula", ncores = NULL, model=model)
res = calculate_AUCs(n01_p=15, n_train_sets = c(15,30,60,120,150), n01_test=300, num_of_seeds=30, random_seeds=TRUE, seeds=NULL, calculate_std_of_AUC_and_produce_plot=TRUE, method="gaussian_copula", ncores = NULL, model=c("svm","randomforest","logistic","lda","tree"))
a = c(15,30,60,120,150)
c(c(15,15),c(30,30))
n01_p=c(15,15)
n01_p[0]
n01_p[1]
a = list(c(15,15),c(30,30))
for (aa in a){}
for (aa in a){}
for (aa in a){
print(aa)
}
n_train_sets = c(c(15,15),c(30,30),c(60,60),c(120,120),c(150,150))
dim(n_train_sets) = 2
dim(n_train_sets) = c(2,5)
list(n_train_sets)
length(n_train_sets)
dim(n_train_sets) = c(2,)
number_of_train_sets = length(n_train_sets)/2
n_train_sets = c(c(15,20),c(30,35),c(60,65),c(120,125),c(150,155))
dim(n_train_sets) = c(2,number_of_train_sets)
n_train_sets
i=1
n0_train <- n_train_sets[1,i]
n1_train <- n_train_sets[2,i]
n_train_sets
n_train_sets[1,] + n_train_sets[2,]
library(SSD)
library(SSD)
n_train_sets = c(c(15,15),c(30,30),c(60,60),c(120,120),c(150,150))
# model=c("svm","randomforest")
model=c("svm","randomforest","logistic","lda","tree")
getwd()
# res = calculate_AUCs(num_of_seeds=30, random_seeds=TRUE, seeds=NULL, calculate_std_of_AUC_and_produce_plot=TRUE, method="gaussian_copula", ncores = NULL, model=c("svm","randomforest","logistic","lda","tree"))
res = calculate_AUCs(n01_all= c(800,800), n01_p=c(15,15), n_train_sets = c(c(15,15),c(30,30),c(60,60),c(120,120),c(150,150)), n01_test=c(300,300),num_of_seeds=30, random_seeds=TRUE, seeds=NULL, calculate_std_of_AUC_and_produce_plot=TRUE, method="pca2_mvnorm", ncores = NULL, model=c("svm","randomforest","logistic","lda","tree"))
array(c(rep(0,d),rep(2,d),dim=c(2,5))
)
array(c(rep(0,d),rep(2,d)),dim=c(2,5))
d=5
array(c(rep(0,d),rep(2,d)),dim=c(2,5))
array(c(rep(0,d),rep(2,d)),dim=c(5,2))
t(array(c(rep(0,d),rep(2,d)),dim=c(5,2)))
df = 10
rho=0.5
d=5
delta = rep(2,d)
H<-abs(outer(1:d,1:d,"-"))
covxx=rho^H
c(rep(0,d),rep(2,d))
list("t-distribution",df=10,delta=c(rep(0,d),rep(2,d)),sigma=covxx)
list(dist="t-distribution",df=10,delta=c(rep(0,d),rep(2,d)),sigma=covxx)
diag(5)
library(SSD)
data_generation=list(dist="t-distribution",sigma=diag(5),df=10,delta=c(rep(0,5),rep(2,5))
)
library(SSD)
calculate_AUCsdelta=c(rep(0,5),rep(2,5))
delta=c(rep(0,5),rep(2,5))
delta[1,]
delta
dim(delta) = c(5,2)
delta
delta = t(delta)
delta
delta[1,]
list(class_0=diag(5),class_1=diag(5))
data_generation=list(dist="gaussian",sigma=list(class_0=diag(5),class_1=diag(5)),mu=c(rep(0,5),rep(2,5)))
sigma=list(class_0=diag(5),class_1=diag(5))
sigma$class_0
df=c(10,10)
df[1]
data_generation$sigma$class_0
data_generation$df[1]
data_generation=list(dist="t-distribution",sigma=list(class_0=diag(5),class_1=diag(5)),df=c(10,10),delta=c(rep(0,5),rep(2,5)))
data_generation$df[1]
data_generation$delta[1,]
library(SSD)
data_generation=list(dist="gaussian",sigma=list(class_0=diag(5),class_1=diag(5)),mu=c(rep(0,5),rep(2,5)))
data = generate_data(seed = 1, n01_all = c(800, 800),
data_generation = data_generation)
data_generation=list(dist="t-distribution",sigma=list(class_0=diag(5),class_1=diag(5)),df=c(10,10),delta=c(rep(0,5),rep(2,5)))
data = generate_data(seed = 1, n01_all = c(800, 800),
data_generation = data_generation)
library(SSD)
data_generation=list(dist="t-distribution",sigma=list(class_0=covxx,class_1=covxx),df=c(10,10),delta=c(rep(0,5),rep(2,5)))
df = 10
rho=0.5
d=5
delta = rep(2,d)
H<-abs(outer(1:d,1:d,"-"))
covxx=rho^H
data_generation=list(dist="t-distribution",sigma=list(class_0=covxx,class_1=covxx),df=c(10,10),delta=c(rep(0,5),rep(2,5)))
getwd()
# res = calculate_AUCs(num_of_seeds=30, random_seeds=TRUE, seeds=NULL, calculate_std_of_AUC_and_produce_plot=TRUE, method="gaussian_copula", ncores = NULL, model=c("svm","randomforest","logistic","lda","tree"))
res = calculate_AUCs(n01_all= c(800,800), n01_p=c(15,15), n_train_sets = c(c(15,15),c(30,30),c(60,60),c(120,120),c(150,150)), n01_test=c(300,300),num_of_seeds=30, random_seeds=TRUE, seeds=NULL, calculate_std_of_AUC_and_produce_plot=TRUE, method="pca2_mvnorm", ncores = NULL, model=c("svm","randomforest","logistic","lda","tree"), data_generation = data_generation)
library(SSD)
# res = calculate_AUCs(num_of_seeds=30, random_seeds=TRUE, seeds=NULL, calculate_std_of_AUC_and_produce_plot=TRUE, method="gaussian_copula", ncores = NULL, model=c("svm","randomforest","logistic","lda","tree"))
res = calculate_AUCs(n01_all= c(800,800), n01_p=c(15,15), n_train_sets = c(c(15,15),c(30,30),c(60,60),c(120,120),c(150,150)), n01_test=c(300,300),num_of_seeds=30, random_seeds=TRUE, seeds=NULL, calculate_std_of_AUC_and_produce_plot=TRUE, method="pca2_mvnorm", ncores = NULL, model=c("svm","randomforest","logistic","lda","tree"), data_generation = data_generation)
data_generation=list(dist="t-distribution",sigma=list(class_0=covxx,class_1=covxx),df=c(10,10),delta=c(rep(0,5),rep(2,5)))
n_train_sets = c(c(15,15),c(30,30),c(60,60),c(120,120),c(150,150))
# model=c("svm","randomforest")
model=c("svm","randomforest","logistic","lda","tree")
x=1
calculate_AUC_base(n01_all=n01_all, n01_p=n01_p, n_train_sets=n_train_sets, n01_test=n01_test, seed=x, method=method, model=model, data_generation=data_generation)
calculate_AUC_base(n_train_sets=n_train_sets, seed=x, model=model, data_generation=data_generation)
warnings()
df = 10
rho=0.5
d=5
delta = rep(2,d)
H<-abs(outer(1:d,1:d,"-"))
covxx=rho^H
data_generation=list(dist="t-distribution",sigma=list(class_0=covxx,class_1=covxx),df=c(10,10),delta=c(rep(0,5),rep(2,5)))
# res = calculate_AUCs(num_of_seeds=30, random_seeds=TRUE, seeds=NULL, calculate_std_of_AUC_and_produce_plot=TRUE, method="gaussian_copula", ncores = NULL, model=c("svm","randomforest","logistic","lda","tree"))
res = calculate_AUCs(n01_all= c(800,800), n01_p=c(15,15), n_train_sets = c(c(15,15),c(30,30),c(60,60),c(120,120),c(150,150)), n01_test=c(300,300),num_of_seeds=30, random_seeds=TRUE, seeds=NULL, calculate_std_of_AUC_and_produce_plot=TRUE, method="pca2_mvnorm", ncores = NULL, model=c("svm","randomforest","logistic","lda","tree"), data_generation = data_generation)
library(SSD)
# res = calculate_AUCs(num_of_seeds=30, random_seeds=TRUE, seeds=NULL, calculate_std_of_AUC_and_produce_plot=TRUE, method="gaussian_copula", ncores = NULL, model=c("svm","randomforest","logistic","lda","tree"))
res = calculate_AUCs(n01_all= c(800,800), n01_p=c(15,15), n_train_sets = c(c(15,15),c(30,30),c(60,60),c(120,120),c(150,150)), n01_test=c(300,300),num_of_seeds=30, random_seeds=TRUE, seeds=NULL, calculate_std_of_AUC_and_produce_plot=TRUE, method="pca2_mvnorm", ncores = NULL, model=c("svm","randomforest","logistic","lda","tree"), data_generation = data_generation)
library(SSD)
df = 10
rho=0.5
d=5
delta = rep(2,d)
H<-abs(outer(1:d,1:d,"-"))
covxx=rho^H
data_generation=list(dist="t-distribution",sigma=list(class_0=covxx,class_1=covxx),df=c(10,10),delta=c(rep(0,5),rep(2,5)))
# res = calculate_AUCs(num_of_seeds=30, random_seeds=TRUE, seeds=NULL, calculate_std_of_AUC_and_produce_plot=TRUE, method="gaussian_copula", ncores = NULL, model=c("svm","randomforest","logistic","lda","tree"))
res = calculate_AUCs(n01_all= c(800,800), n01_p=c(15,15), n_train_sets = c(c(15,15),c(30,30),c(60,60),c(120,120),c(150,150)), n01_test=c(300,300),num_of_seeds=30, random_seeds=TRUE, seeds=NULL, calculate_std_of_AUC_and_produce_plot=TRUE, method="pca2_mvnorm", ncores = NULL, model=c("svm","randomforest","logistic","lda","tree"), data_generation = data_generation)
data = generate_data(seed=1, n01_all=c(800,800),data_generation=list(dist="t-distribution",sigma=list(class_0=diag(5),class_1=diag(5)),df=c(10,10),delta=c(rep(0,5),rep(2,5))))
View(data)
View(data)
data[["x_data"]]
generate_data_2 <- function(seed=1)
{
library(mvtnorm)
n1_p <- n0_p <- 15
n_p=n0_p+n1_p
df = 10
rho=0.5
d=5
delta = rep(2,d)
H<-abs(outer(1:d,1:d,"-"))
covxx=rho^H
n1_all <- n0_all <- 800
n0_test <- n1_test <- 300
n_test = n0_test + n1_test
set.seed(seed)
x0_all = rmvt(n = n0_all, sigma = covxx, delta = rep(0,d), df = df)
x1_all = rmvt(n = n1_all, sigma = covxx, delta = delta, df = df)
x_data = rbind(x0_all,x1_all)
y_data = c(rep(0,n0_all),rep(1,n1_all))
result = list(x_data=x_data, y_data=y_data)
return(result)
}
data_2 = generate_data_2(seed=1)
data = generate_data(seed=1, n01_all=c(800,800),data_generation=list(dist="t-distribution",sigma=list(class_0=covxx,class_1=covxx),df=c(10,10),delta=c(rep(0,5),rep(2,5))))
data == data_2
data[[x_data]] == data_2[[x_data]]
View(data)
View(data)
data[["x_data"]] == data_2[["x_data"]]
sum(data[["x_data"]] == data_2[["x_data"]])
load("D:/Dropbox/USC/RA/2020summer/R Package/Sample-Size-Determination/auc_res.Rdata")
View(res)
View(res)
res[[1]]
a = res[[1]]
df = 10
rho=0.5
d=5
delta = rep(2,d)
H<-abs(outer(1:d,1:d,"-"))
covxx=rho^H
data_generation=list(dist="t-distribution",sigma=list(class_0=covxx,class_1=covxx),df=c(10,10),delta=c(rep(0,5),rep(2,5)))
# res = calculate_AUCs(num_of_seeds=30, random_seeds=TRUE, seeds=NULL, calculate_std_of_AUC_and_produce_plot=TRUE, method="gaussian_copula", ncores = NULL, model=c("svm","randomforest","logistic","lda","tree"))
res = calculate_AUCs(n01_all= c(800,800), n01_p=c(15,15), n_train_sets = c(c(15,15),c(30,30),c(60,60),c(120,120),c(150,150)), n01_test=c(300,300),num_of_seeds=20, random_seeds=TRUE, seeds=NULL, calculate_std_of_AUC_and_produce_plot=TRUE, method="pca2_mvnorm", ncores = NULL, model=c("svm","randomforest","logistic","lda","tree"), data_generation = data_generation)
n_train_sets = c(c(15,15),c(30,30),c(60,60),c(120,120),c(150,150))
max(n_train_sets)
library(SSD)
load("D:/Dropbox/USC/RA/2020summer/R Package/Sample-Size-Determination/auc_res.Rdata")
calculate_std_of_AUC_and_draw_plot(res,n_train_sets=n_train_sets, model=model)
# model=c("svm","randomforest")
model=c("svm","randomforest","logistic","lda","tree")
calculate_std_of_AUC_and_draw_plot(res,n_train_sets=n_train_sets, model=model)
getwd()
n_train_sets = c(c(15,15),c(30,30),c(60,60),c(120,120),c(150,150))
# model=c("svm","randomforest")
model=c("svm","randomforest","logistic","lda","tree")
library(SSD)
load("D:/Dropbox/USC/RA/2020summer/R Package/Sample-Size-Determination/auc_res.Rdata")
calculate_std_of_AUC_and_draw_plot(res,n_train_sets=n_train_sets, model=model)
library(SSD)
df = 10
rho=0.5
d=5
delta = rep(2,d)
H<-abs(outer(1:d,1:d,"-"))
covxx=rho^H
data_generation=list(dist="t-distribution",sigma=list(class_0=covxx,class_1=covxx),df=c(10,10),delta=c(rep(0,5),rep(2,5)))
# res = calculate_AUCs(num_of_seeds=30, random_seeds=TRUE, seeds=NULL, calculate_std_of_AUC_and_produce_plot=TRUE, method="gaussian_copula", ncores = NULL, model=c("svm","randomforest","logistic","lda","tree"))
res = calculate_AUCs(n01_all= c(800,800), n01_p=c(15,15), n_train_sets = c(c(15,15),c(30,30),c(60,60),c(120,120),c(150,150)), n01_test=c(300,300),num_of_seeds=20, random_seeds=TRUE, seeds=NULL, calculate_std_of_AUC_and_produce_plot=TRUE, method="pca2_mvnorm", ncores = NULL, model=c("svm","randomforest","logistic","lda","tree"), data_generation = data_generation)
library(SSD)
# res = calculate_AUCs(num_of_seeds=30, random_seeds=TRUE, seeds=NULL, calculate_std_of_AUC_and_produce_plot=TRUE, method="gaussian_copula", ncores = NULL, model=c("svm","randomforest","logistic","lda","tree"))
res = calculate_AUCs(n01_all= c(800,800), n01_p=c(15,15), n_train_sets = c(c(15,15),c(30,30),c(60,60),c(120,120),c(150,150)), n01_test=c(300,300),num_of_seeds=20, random_seeds=TRUE, seeds=NULL, calculate_std_of_AUC_and_produce_plot=TRUE, method="pca2_mvnorm", ncores = NULL, model=c("svm","randomforest","logistic","lda","tree"), data_generation = data_generation)
library(SSD)
# res = calculate_AUCs(num_of_seeds=30, random_seeds=TRUE, seeds=NULL, calculate_std_of_AUC_and_produce_plot=TRUE, method="gaussian_copula", ncores = NULL, model=c("svm","randomforest","logistic","lda","tree"))
res = calculate_AUCs(n01_all= c(800,800), n01_p=c(15,15), n_train_sets = c(c(15,15),c(30,30),c(60,60),c(120,120),c(150,150)), n01_test=c(300,300),num_of_seeds=20, random_seeds=TRUE, seeds=NULL, calculate_std_of_AUC_and_produce_plot=TRUE, method="pca2_mvnorm", ncores = NULL, model=c("svm","randomforest","logistic","lda","tree"), data_generation = data_generation)
library(SSD)
# res = calculate_AUCs(num_of_seeds=30, random_seeds=TRUE, seeds=NULL, calculate_std_of_AUC_and_produce_plot=TRUE, method="gaussian_copula", ncores = NULL, model=c("svm","randomforest","logistic","lda","tree"))
res = calculate_AUCs(n01_all= c(800,800), n01_p=c(15,15), n_train_sets = c(c(15,15),c(30,30),c(60,60),c(120,120),c(150,150)), n01_test=c(300,300),num_of_seeds=20, random_seeds=TRUE, seeds=NULL, calculate_std_of_AUC_and_produce_plot=TRUE, method="pca2_mvnorm", ncores = NULL, model=c("svm","randomforest","logistic","lda","tree"), data_generation = data_generation)
library(SSD)
# res = calculate_AUCs(num_of_seeds=30, random_seeds=TRUE, seeds=NULL, calculate_std_of_AUC_and_produce_plot=TRUE, method="gaussian_copula", ncores = NULL, model=c("svm","randomforest","logistic","lda","tree"))
res = calculate_AUCs(n01_all= c(800,800), n01_p=c(15,15), n_train_sets = c(c(15,15),c(30,30),c(60,60),c(120,120),c(150,150)), n01_test=c(300,300),num_of_seeds=20, random_seeds=TRUE, seeds=NULL, calculate_std_of_AUC_and_produce_plot=TRUE, method="pca2_mvnorm", ncores = NULL, model=c("svm","randomforest","logistic","lda","tree"), data_generation = data_generation)
f = 10
rho=0.5
d=5
delta = rep(2,d)
H<-abs(outer(1:d,1:d,"-"))
covxx=rho^H
data_generation=list(dist="t-distribution",sigma=list(class_0=covxx,class_1=covxx),df=c(10,10),delta=c(rep(0,5),rep(2,5)))
library(SSD)
# res = calculate_AUCs(num_of_seeds=30, random_seeds=TRUE, seeds=NULL, calculate_std_of_AUC_and_produce_plot=TRUE, method="gaussian_copula", ncores = NULL, model=c("svm","randomforest","logistic","lda","tree"))
res = calculate_AUCs(n01_all= c(800,800), n01_p=c(15,15), n_train_sets = c(c(15,15),c(30,30),c(60,60),c(120,120),c(150,150)), n01_test=c(300,300),num_of_seeds=20, random_seeds=TRUE, seeds=NULL, calculate_std_of_AUC_and_produce_plot=TRUE, method="pca2_mvnorm", ncores = NULL, model=c("svm","randomforest","logistic","lda","tree"), data_generation = data_generation)
data_generation=list(dist="gaussian",sigma=list(class_0=covxx,class_1=covxx),delta=c(rep(0,5),rep(2,5)))
data_generation=list(dist="gaussian",sigma=list(class_0=covxx,class_1=covxx),mu=c(rep(0,5),rep(2,5)))
# res = calculate_AUCs(num_of_seeds=30, random_seeds=TRUE, seeds=NULL, calculate_std_of_AUC_and_produce_plot=TRUE, method="gaussian_copula", ncores = NULL, model=c("svm","randomforest","logistic","lda","tree"))
res = calculate_AUCs(n01_all= c(800,800), n01_p=c(15,15), n_train_sets = c(c(15,15),c(30,30),c(60,60),c(120,120),c(150,150)), n01_test=c(300,300),num_of_seeds=20, random_seeds=TRUE, seeds=NULL, calculate_std_of_AUC_and_produce_plot=TRUE, method="pca2_mvnorm", ncores = NULL, model=c("svm","randomforest","logistic","lda","tree"), data_generation = data_generation)
# res = calculate_AUCs(num_of_seeds=30, random_seeds=TRUE, seeds=NULL, calculate_std_of_AUC_and_produce_plot=TRUE, method="gaussian_copula", ncores = NULL, model=c("svm","randomforest","logistic","lda","tree"))
res = calculate_AUCs(n01_all= c(800,800), n01_p=c(15,15), n_train_sets = c(c(15,15),c(30,30),c(60,60),c(120,120),c(150,150)), n01_test=c(300,300),num_of_seeds=20, random_seeds=TRUE, seeds=NULL, calculate_std_of_AUC_and_produce_plot=TRUE, method="pca2_mvnorm", ncores = NULL, model=c("svm","randomforest","logistic","lda","tree"), data_generation = data_generation)
# res = calculate_AUCs(num_of_seeds=30, random_seeds=TRUE, seeds=NULL, calculate_std_of_AUC_and_produce_plot=TRUE, method="gaussian_copula", ncores = NULL, model=c("svm","randomforest","logistic","lda","tree"))
res = calculate_AUCs(n01_all= c(800,800), n01_p=c(15,15), n_train_sets = c(c(15,15),c(30,30),c(60,60),c(120,120),c(150,150)), n01_test=c(300,300),num_of_seeds=20, random_seeds=TRUE, seeds=NULL, calculate_std_of_AUC_and_produce_plot=TRUE, method="gaussian_copula", ncores = NULL, model=c("svm","randomforest","logistic","lda","tree"), data_generation = data_generation)
View(data_generation)
View(data_generation)
data_generation=list(dist="t-distribution",sigma=list(class_0=covxx,class_1=covxx),df=c(10,10),delta=c(rep(0,5),rep(2,5)))
# res = calculate_AUCs(num_of_seeds=30, random_seeds=TRUE, seeds=NULL, calculate_std_of_AUC_and_produce_plot=TRUE, method="gaussian_copula", ncores = NULL, model=c("svm","randomforest","logistic","lda","tree"))
res = calculate_AUCs(n01_all= c(800,800), n01_p=c(15,15), n_train_sets = c(c(15,15),c(30,30),c(60,60),c(120,120),c(150,150)), n01_test=c(300,300),num_of_seeds=20, random_seeds=TRUE, seeds=NULL, calculate_std_of_AUC_and_produce_plot=TRUE, method="gaussian_copula", ncores = NULL, model=c("svm","randomforest","logistic","lda","tree"), data_generation = data_generation)
load("D:/Dropbox/USC/RA/2020summer/R Package/result/copula/auc_res.Rdata")
library(SSD)
df = 10
rho=0.5
d=5
delta = rep(2,d)
H<-abs(outer(1:d,1:d,"-"))
covxx=rho^H
library(SSD)
data_generation=list(dist="t-distribution",sigma=list(class_0=covxx,class_1=covxx),df=c(10,10),delta=c(rep(0,5),rep(2,5)))
# res = calculate_AUCs(num_of_seeds=30, random_seeds=TRUE, seeds=NULL, calculate_std_of_AUC_and_produce_plot=TRUE, method="gaussian_copula", ncores = NULL, model=c("svm","randomforest","logistic","lda","tree"))
res = calculate_AUCs(n01_all= c(800,800), n01_p=c(15,15), n_train_sets = c(c(15,15),c(30,30),c(60,60),c(120,120),c(150,150)), n01_test=c(300,300),num_of_seeds=20, random_seeds=TRUE, seeds=NULL, calculate_std_of_AUC_and_produce_plot=TRUE, method="pca2_mvnorm", ncores = NULL, model=c("svm","randomforest","logistic","lda","tree"), data_generation = data_generation)
devtools::install_github("ShudongSun/Sample-Size-Determination")
install.packages("devtools")
install.packages("devtools")
install.packages("installr")
Sys.which("make")
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
getwd()
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
Sys.which("make")
Sys.which("make")
install.packages("Rd2roxygen")
library(SSD)
library(SSD)
library(SSD)
library(SSD)
library(SSD)
library(SSD)
library(SSD)
data = generate_data()
data_split1 = split_data(data$x_data, data$y_data, n_train = 30, seed = 1)
View(data_split1)
View(data_split1)
data_split2 = split_data(data$x_data, data$y_data, n_train = 1000, n_test = 500,
seed = 1)
data_split3 = split_data(data$x_data, data$y_data, n_train = 0.6, n_test = 0.4, seed = 1)
View(data_split2)
View(data_split2)
View(data_split3)
View(data_split3)
library(mvtnorm)
library(MASS)
df = 10
rho = 0.5
d = 5
delta = rep(2, d)
H <- abs(outer(1:d, 1:d, "-"))
covxx = rho^H
n1_all <- n0_all <- 800
n1_train <- n0_train <- n_train <- 60
n0_test <- n1_test <- 300
x0_all = rmvt(n = n0_all, sigma = covxx, delta = rep(0, d), df = df)
x1_all = rmvt(n = n1_all, sigma = covxx, delta = delta, df = df)
x_data = rbind(x0_all, x1_all)
y_data = c(rep(0, n0_all), rep(1, n1_all))
id0 <- which(y_data == 0)
id1 <- which(y_data == 1)
id0_train <- sample(id0, n0_train)
id1_train <- sample(id1, n1_train)
id_train <- c(id0_train, id1_train)
x_train <- as.matrix(x_data[id_train, ])
y_train <- as.matrix(y_data[id_train])
id0_remain = setdiff(id0, id0_train)
id1_remain = setdiff(id1, id1_train)
id0_test <- sample(id0_remain, n0_test)
id1_test <- sample(id1_remain, n1_test)
id_test <- c(id0_test, id1_test)
x_test <- as.matrix(x_data[id_test, ])
result = pilot_train_pca2(x_train, y_train, x_test, method = c("svm", "randomforest"))
View(result)
View(result)
library(mvtnorm)
library(MASS)
df = 10
rho = 0.5
d = 5
delta = rep(2, d)
H <- abs(outer(1:d, 1:d, "-"))
covxx = rho^H
n1_all <- n0_all <- 800
n1_train <- n0_train <- n_train <- 60
n0_test <- n1_test <- 300
x0_all = rmvt(n = n0_all, sigma = covxx, delta = rep(0, d), df = df)
x1_all = rmvt(n = n1_all, sigma = covxx, delta = delta, df = df)
x_data = rbind(x0_all, x1_all)
y_data = c(rep(0, n0_all), rep(1, n1_all))
id0 <- which(y_data == 0)
id1 <- which(y_data == 1)
id0_train <- sample(id0, n0_train)
id1_train <- sample(id1, n1_train)
id_train <- c(id0_train, id1_train)
x_train <- as.matrix(x_data[id_train, ])
y_train <- as.matrix(y_data[id_train])
id0_remain = setdiff(id0, id0_train)
id1_remain = setdiff(id1, id1_train)
id0_test <- sample(id0_remain, n0_test)
id1_test <- sample(id1_remain, n1_test)
id_test <- c(id0_test, id1_test)
x_test <- as.matrix(x_data[id_test, ])
result = pilot_train(x_train, y_train, x_test, method = c("svm", "randomforest"))
View(result)
View(result)
library(mvtnorm)
library(MASS)
df = 10
rho = 0.5
d = 5
delta = rep(2, d)
H <- abs(outer(1:d, 1:d, "-"))
covxx = rho^H
n1_all <- n0_all <- 800
n1_p <- n0_p <- 15
x0_all = rmvt(n = n0_all, sigma = covxx, delta = rep(0, d), df = df)
x1_all = rmvt(n = n1_all, sigma = covxx, delta = delta, df = df)
x_data = rbind(x0_all, x1_all)
y_data = c(rep(0, n0_all), rep(1, n1_all))
id0 <- which(y_data == 0)
id1 <- which(y_data == 1)
id0_p <- sample(id0, n0_p)
id1_p <- sample(id1, n1_p)
id_p <- c(id0_p, id1_p)
x_pilot <- as.matrix(x_data[id_p, ])
y_pilot <- as.matrix(y_data[id_p])
n1_train <- n0_train <- n_train <- 60
n0_test <- n1_test <- 300
result = pilot_tfe_gaussian_copula(x_pilot, y_pilot, n0_train, n1_train, n0_test,
n1_test, method = c("svm", "randomforest"))
View(result)
View(result)
library(mvtnorm)
library(MASS)
df = 10
rho = 0.5
d = 5
delta = rep(2, d)
H <- abs(outer(1:d, 1:d, "-"))
covxx = rho^H
n1_all <- n0_all <- 800
n1_p <- n0_p <- 15
x0_all = rmvt(n = n0_all, sigma = covxx, delta = rep(0, d), df = df)
x1_all = rmvt(n = n1_all, sigma = covxx, delta = delta, df = df)
x_data = rbind(x0_all, x1_all)
y_data = c(rep(0, n0_all), rep(1, n1_all))
id0 <- which(y_data == 0)
id1 <- which(y_data == 1)
id0_p <- sample(id0, n0_p)
id1_p <- sample(id1, n1_p)
id_p <- c(id0_p, id1_p)
x_pilot <- as.matrix(x_data[id_p, ])
y_pilot <- as.matrix(y_data[id_p])
n1_train <- n0_train <- n_train <- 60
n0_test <- n1_test <- 300
result = pilot_tfe_gaussian_copula(x_pilot, y_pilot, n0_train, n1_train, n0_test,
n1_test, method = c("svm", "randomforest"))
View(result)
View(result)
df = 10
rho = 0.5
d = 5
delta = rep(2, d)
H <- abs(outer(1:d, 1:d, "-"))
covxx = rho^H
data = generate_data(seed = 1, n01_all = c(800, 800),
data_generation = list(dist = "t-distribution", sigma = list(class_0 = covxx,
class_1 = covxx), df = c(10, 10), delta = c(rep(0,
5), rep(2, 5))))
View(data)
View(data)
data[["y_data"]]
AUC = calculate_AUC_base(n01_p=15, n01_test=300, seed=1)
AUC = calculate_AUC_base(n01_p=c(15,15), n01_test=c(300,300), seed=1)
getwd()
calculate_std_of_AUC_and_draw_plot(res)
calculate_std_of_AUC_and_draw_plot(AUC)
calculate_std_of_AUC_and_draw_plot(AUC, n_train_sets = c(c(15,15),c(30,30),c(60,60),c(120,120),c(150,150)), model=c("svm","randomforest"))
res = calculate_AUC_base(n01_p=c(15,15), n01_test=c(300,300), seed=1, model=c("svm","randomforest"), n_train_sets = c(c(15,15),c(30,30),c(60,60),c(120,120),c(150,150)))
calculate_std_of_AUC_and_draw_plot(res, n_train_sets = c(c(15,15),c(30,30),c(60,60),c(120,120),c(150,150)), model=c("svm","randomforest"))
res[[1]] = AUC
res = []
res = {}
res[[1]] = AUC
calculate_std_of_AUC_and_draw_plot(res, n_train_sets = c(c(15,15),c(30,30),c(60,60),c(120,120),c(150,150)), model=c("svm","randomforest"))
res[[1]]
res[[1]][1,1,1]
calculate_std_of_AUC_and_draw_plot(res, n_train_sets = c(c(15,15),c(30,30),c(60,60),c(120,120),c(150,150)), model=c("svm","randomforest"))
calculate_AUCs(n01_all= c(800,800), n01_p=c(15,15), n_train_sets = c(c(15,15),c(30,30),c(60,60),c(120,120),c(150,150)), n01_test=c(300,300), num_of_seeds=1, random_seeds=FALSE, calculate_std_of_AUC_and_produce_plot=TRUE)
calculate_AUCs(n01_all= c(800,800), n01_p=c(15,15), n_train_sets = c(c(15,15),c(30,30),c(60,60),c(120,120),c(150,150)), n01_test=c(300,300), num_of_seeds=2, random_seeds=FALSE, calculate_std_of_AUC_and_produce_plot=TRUE)
library(SSD)
