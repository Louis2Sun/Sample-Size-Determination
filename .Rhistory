rm(list=ls())
source("../../pilotfuns.R")
library(RWeka)
library(MASS)
n1_p <- n0_p <- 15
n_p=n0_p+n1_p
### data1:bio_unbalance
# ann_train <- read.table("../ann/ann-train.data")
# ann_test <- read.table("../ann/ann-test.data")
#
# # table(ann_train$V22)
# # table(ann_test$V22)
# x_train = ann_train[,1:21]
# y_train = ifelse(ann_train$V22==3,1,0)
#
# x_test = ann_test[,1:21]
# y_test = ifelse(ann_test$V22==3,1,0)
### data2:md
# md_data <- read.arff("../data/md/messidor_features.arff")
# table(md_data$Class)
#
# x_data = md_data[,1:19]
# y_data = md_data[,20]
### data3:yeast
#choose CYT (cytosolic or cytoskeletal) and MIT (mitochondrial) as class 0 and the others as class 1
#remove feature 6 and 7: almost all 0.5 and 0.0
yeast_data <- read.table("../data/yeast/yeast.data")
x_data = yeast_data[,c(2:5,8:9)]
y_label = yeast_data[,10]
id0 = which(y_label=="CYT" | y_label=="MIT")
y_data = rep(1,length(y_label))
y_data[id0] = 0
table(y_data)
################pilot data
##First read in the arguments listed at the command line
args=(commandArgs(TRUE))
##args is now a list of character vectors
## First check to see if arguments are passed.
## Then cycle through each element of the list and evaluate the expressions.
if(length(args)==0){
print("No arguments supplied.")
##supply default values
seed = 1
n_train = 150
test_from_true = 0
}else{
for(i in 1:length(args)){
eval(parse(text=args[[i]]))
}
}
# pass-in parameters:
# seed  (eg.seed=1)
# n_train  (eg.n_train=30)
# test_from_true (eg.test_from_true = 1)
# if test_from_true = 2, we use bootstrap to generate the test data (only needed when n0_train=15)
# cat("seed =",seed)
# cat("n_train =",n_train)
# cat("test_from_true =", test_from_true)
### data1:bio_unbalance
# n0_train <- n_train # 30,60,90,120,1200
# IR = 3488/284
# n1_train <- round(n0_train*IR)
#
# n0_test <- 260
# n1_test <- 3193
### data2:md
n1_train <- n0_train <- n_train
n0_test <- n1_test <- 300
n_train = n0_train + n1_train
n_test = n0_test + n1_test
set.seed(seed)
#################real data
id0 <- which(y_data==0)
id1 <- which(y_data==1)
id0_p <- sample(id0,n0_p)
id1_p <- sample(id1,n1_p)
id_p <- c(id0_p,id1_p)
x_pilot <- as.matrix(x_data[id_p,])
y_pilot <- as.matrix(y_data[id_p])
x_remain <- as.matrix(x_data[-id_p,])
y_remain <- as.matrix(y_data[-id_p])
###############pca
x_pilot.pca = prcomp(x_pilot,center = FALSE,scale. = FALSE)
x0_pc1 = x_pilot.pca$x[1:n0_p,1]
x1_pc1 = x_pilot.pca$x[(n0_p+1):n_p,1]
x0_pc2 = x_pilot.pca$x[1:n0_p,2]
x1_pc2 = x_pilot.pca$x[(n0_p+1):n_p,2]
pc_p1=x_pilot.pca$rotation[,1]
pc_p2=x_pilot.pca$rotation[,2]
##################estimate the paramters: mean, variance
mu0_hat1 = mean(x0_pc1)
mu1_hat1 = mean(x1_pc1)
mu0_hat2 = mean(x0_pc2)
mu1_hat2 = mean(x1_pc2)
mu0_hat = c(mu0_hat1,mu0_hat2)
mu1_hat = c(mu1_hat1,mu1_hat2)
x0_pc = cbind(x0_pc1,x0_pc2)
cov0 = cov(x0_pc)
x1_pc = cbind(x1_pc1,x1_pc2)
cov1 = cov(x1_pc)
sigma_hat = ((n0_p-1)*cov0+(n1_p-1)*cov1)/(n0_p+n1_p-2)
########################test data
test_y=c(rep(0,n0_test),rep(1,n1_test))
Loop=100
p.LR <- p.RF <- p.svm <- p.xgb <- matrix(0,Loop,n_test)
for (L in 1:Loop)
{
if(test_from_true==1){
result = pilot_tft_mvnorm_pca2(mu0_hat,mu1_hat,sigma_hat,n0_train,n1_train,n0_test,n1_test,x_remain,y_remain,pc_p1,pc_p2)
}else if(test_from_true==0){
result = pilot_tfe_mvnorm_pca2(mu0_hat,mu1_hat,sigma_hat,n0_train,n1_train,n0_test,n1_test)
}else if(test_from_true==2){
id0_train <- sample(id0,n0_train)
id1_train <- sample(id1,n1_train)
id_train <- c(id0_train,id1_train)
x_train <- as.matrix(x_data[id_train,])
y_train <- as.matrix(y_data[id_train])
id0_remain = setdiff(id0,id0_train)
id1_remain = setdiff(id1,id1_train)
id0_test <- sample(id0_remain,n0_test)
id1_test <- sample(id1_remain,n1_test)
id_test <- c(id0_test,id1_test)
x_test <- as.matrix(x_data[id_test,])
# y_test <- y_data[id_test]
result = pilot_train_pca2(x_train,y_train,x_test)
}
p.LR[L,] = result$p.LR
p.RF[L,] = result$p.RF
p.svm[L,] = result$p.svm
p.xgb[L,] = result$p.xgb
print(L)
}
# make sure that you mkdir the "result_bs" at first
file = paste0("./data/normal2_n0p",n0_p,"_esti_pilotseed",seed,"_n0",n0_train,"_test",test_from_true,".Rdata")
save(p.LR,p.RF,p.svm,p.xgb,test_y,file=file)
# L=20
# A = c(15,30,60,120,150)
# T_ = c(0,2)
# for(test_from_true in T_){
#   for(seed in 1:L){
#     for(n_train in A){
#       cat("R CMD BATCH --no-save --no-restore '--args seed=", seed, " n_train=", n_train," test_from_true=", test_from_true,"' real_mvnorm_pca2.R real_mvnorm_pca2.out &",'\n',sep='')
#     }
#   }
# }
#
# T_ = c(2)
# for(test_from_true in T_){
#   for(seed in 1:L){
#     cat("R CMD BATCH --no-save --no-restore '--args seed=", seed, " n_train=", 15," test_from_true=", test_from_true,"' mvt_normal.R mvt_normal.out &",'\n',sep='')
#   }
# }
rm(list=ls())
library(PRROC)
n0_p=15
Loop=100
args=(commandArgs(TRUE))
if(length(args)==0){
print("No arguments supplied.")
##supply default values
seed=1
n0_train=30 # 60 90 1200 4800
test_from_true = 0
}else{
for(i in 1:length(args)){
eval(parse(text=args[[i]]))
}
}
LR.auc <- RF.auc <- svm.auc <- xgb.auc <- matrix(rep(0,20*Loop),20)
for (seed in 1:1)
{
# seed = 1
for (k in 1: Loop)
{
cat("seed=",seed,",k=",k,"\n")
file = paste0("./data/normal2_n0p",n0_p,"_esti_pilotseed",seed,"_n0",n0_train,"_test",test_from_true,".Rdata")
load(file = file)
index0_test=which(test_y==0)
index1_test=which(test_y==1)
score.LR=p.LR[k,]
roc.LR<-roc.curve(scores.class0 =score.LR[index1_test],scores.class1=score.LR[index0_test],curve =FALSE)
LR.auc[seed,k]=roc.LR$auc
score.RF=p.RF[k,]
roc.RF<-roc.curve(scores.class0 =score.RF[index1_test],scores.class1=score.RF[index0_test],curve =FALSE)
RF.auc[seed,k]=roc.RF$auc
score.svm=p.svm[k,]
roc.svm<-roc.curve(scores.class0 =score.svm[index1_test],scores.class1=score.svm[index0_test],curve =FALSE)
svm.auc[seed,k]=roc.svm$auc
score.xgb=p.xgb[k,]
roc.xgb<-roc.curve(scores.class0 =score.xgb[index1_test],scores.class1=score.xgb[index0_test],curve =FALSE)
xgb.auc[seed,k]=roc.xgb$auc
}
}
file = paste0("./auc/t_normal_bs_n0p",n0_p,"_auc_n0",n0_train,"_test",test_from_true,".Rdata")
save(LR.auc,RF.auc,svm.auc, xgb.auc, file=file)
A = c(15,30,60,120,150)
T_ = c(2)
for(test_from_true in T_){
for(n_train in A){
cat("R CMD BATCH --no-save --no-restore '--args n0_train=", n_train, " test_from_true=", test_from_true,"' t_AUC.R t_AUC.out &",'\n',sep='')
}
}
#
# T_ = c(2)
# A = c(15)
# for(test_from_true in T_){
#   for(n_train in A){
#     cat("R CMD BATCH --no-save --no-restore '--args n0_train=", n_train, " test_from_true=", test_from_true,"' t_AUC.R t_AUC.out &",'\n',sep='')
#   }
# }
mean(LR.auc[1,])
mean(RF.auc[1,])
mean(svm.auc[1,])
mean(xgb.auc[1,])
rm(list=ls())
library(PRROC)
n0_p=15
Loop=20
args=(commandArgs(TRUE))
if(length(args)==0){
print("No arguments supplied.")
##supply default values
seed=1
n0_train=30 # 60 90 1200 4800
test_from_true = 0
}else{
for(i in 1:length(args)){
eval(parse(text=args[[i]]))
}
}
LR.auc <- RF.auc <- svm.auc <- xgb.auc <- matrix(rep(0,20*Loop),20)
for (seed in 1:1)
{
# seed = 1
for (k in 1: Loop)
{
cat("seed=",seed,",k=",k,"\n")
file = paste0("./data/normal2_n0p",n0_p,"_esti_pilotseed",seed,"_n0",n0_train,"_test",test_from_true,".Rdata")
load(file = file)
index0_test=which(test_y==0)
index1_test=which(test_y==1)
score.LR=p.LR[k,]
roc.LR<-roc.curve(scores.class0 =score.LR[index1_test],scores.class1=score.LR[index0_test],curve =FALSE)
LR.auc[seed,k]=roc.LR$auc
score.RF=p.RF[k,]
roc.RF<-roc.curve(scores.class0 =score.RF[index1_test],scores.class1=score.RF[index0_test],curve =FALSE)
RF.auc[seed,k]=roc.RF$auc
score.svm=p.svm[k,]
roc.svm<-roc.curve(scores.class0 =score.svm[index1_test],scores.class1=score.svm[index0_test],curve =FALSE)
svm.auc[seed,k]=roc.svm$auc
score.xgb=p.xgb[k,]
roc.xgb<-roc.curve(scores.class0 =score.xgb[index1_test],scores.class1=score.xgb[index0_test],curve =FALSE)
xgb.auc[seed,k]=roc.xgb$auc
}
}
file = paste0("./auc/t_normal_bs_n0p",n0_p,"_auc_n0",n0_train,"_test",test_from_true,".Rdata")
save(LR.auc,RF.auc,svm.auc, xgb.auc, file=file)
A = c(15,30,60,120,150)
T_ = c(2)
for(test_from_true in T_){
for(n_train in A){
cat("R CMD BATCH --no-save --no-restore '--args n0_train=", n_train, " test_from_true=", test_from_true,"' t_AUC.R t_AUC.out &",'\n',sep='')
}
}
#
# T_ = c(2)
# A = c(15)
# for(test_from_true in T_){
#   for(n_train in A){
#     cat("R CMD BATCH --no-save --no-restore '--args n0_train=", n_train, " test_from_true=", test_from_true,"' t_AUC.R t_AUC.out &",'\n',sep='')
#   }
# }
mean(LR.auc[1,])
mean(RF.auc[1,])
mean(svm.auc[1,])
mean(xgb.auc[1,])
#######################N test dataset
rm(list=ls())
source("../../pilotfuns.R")
library(RWeka)
library(MASS)
n1_p <- n0_p <- 15
n_p=n0_p+n1_p
### data1:bio_unbalance
# ann_train <- read.table("../ann/ann-train.data")
# ann_test <- read.table("../ann/ann-test.data")
#
# # table(ann_train$V22)
# # table(ann_test$V22)
# x_train = ann_train[,1:21]
# y_train = ifelse(ann_train$V22==3,1,0)
#
# x_test = ann_test[,1:21]
# y_test = ifelse(ann_test$V22==3,1,0)
### data2:md
# md_data <- read.arff("../data/md/messidor_features.arff")
# table(md_data$Class)
#
# x_data = md_data[,1:19]
# y_data = md_data[,20]
### data3:yeast
#choose CYT (cytosolic or cytoskeletal) and MIT (mitochondrial) as class 0 and the others as class 1
#remove feature 6 and 7: almost all 0.5 and 0.0
yeast_data <- read.table("../data/yeast/yeast.data")
x_data = yeast_data[,c(2:5,8:9)]
y_label = yeast_data[,10]
id0 = which(y_label=="CYT" | y_label=="MIT")
y_data = rep(1,length(y_label))
y_data[id0] = 0
table(y_data)
################pilot data
##First read in the arguments listed at the command line
args=(commandArgs(TRUE))
##args is now a list of character vectors
## First check to see if arguments are passed.
## Then cycle through each element of the list and evaluate the expressions.
if(length(args)==0){
print("No arguments supplied.")
##supply default values
seed = 2
n_train = 150
test_from_true = 0
}else{
for(i in 1:length(args)){
eval(parse(text=args[[i]]))
}
}
# pass-in parameters:
# seed  (eg.seed=1)
# n_train  (eg.n_train=30)
# test_from_true (eg.test_from_true = 1)
# if test_from_true = 2, we use bootstrap to generate the test data (only needed when n0_train=15)
# cat("seed =",seed)
# cat("n_train =",n_train)
# cat("test_from_true =", test_from_true)
### data1:bio_unbalance
# n0_train <- n_train # 30,60,90,120,1200
# IR = 3488/284
# n1_train <- round(n0_train*IR)
#
# n0_test <- 260
# n1_test <- 3193
### data2:md
n1_train <- n0_train <- n_train
n0_test <- n1_test <- 300
n_train = n0_train + n1_train
n_test = n0_test + n1_test
set.seed(seed)
#################real data
id0 <- which(y_data==0)
id1 <- which(y_data==1)
id0_p <- sample(id0,n0_p)
id1_p <- sample(id1,n1_p)
id_p <- c(id0_p,id1_p)
x_pilot <- as.matrix(x_data[id_p,])
y_pilot <- as.matrix(y_data[id_p])
x_remain <- as.matrix(x_data[-id_p,])
y_remain <- as.matrix(y_data[-id_p])
###############pca
x_pilot.pca = prcomp(x_pilot,center = FALSE,scale. = FALSE)
x0_pc1 = x_pilot.pca$x[1:n0_p,1]
x1_pc1 = x_pilot.pca$x[(n0_p+1):n_p,1]
x0_pc2 = x_pilot.pca$x[1:n0_p,2]
x1_pc2 = x_pilot.pca$x[(n0_p+1):n_p,2]
pc_p1=x_pilot.pca$rotation[,1]
pc_p2=x_pilot.pca$rotation[,2]
##################estimate the paramters: mean, variance
mu0_hat1 = mean(x0_pc1)
mu1_hat1 = mean(x1_pc1)
mu0_hat2 = mean(x0_pc2)
mu1_hat2 = mean(x1_pc2)
mu0_hat = c(mu0_hat1,mu0_hat2)
mu1_hat = c(mu1_hat1,mu1_hat2)
x0_pc = cbind(x0_pc1,x0_pc2)
cov0 = cov(x0_pc)
x1_pc = cbind(x1_pc1,x1_pc2)
cov1 = cov(x1_pc)
sigma_hat = ((n0_p-1)*cov0+(n1_p-1)*cov1)/(n0_p+n1_p-2)
########################test data
test_y=c(rep(0,n0_test),rep(1,n1_test))
Loop=100
p.LR <- p.RF <- p.svm <- p.xgb <- matrix(0,Loop,n_test)
for (L in 1:Loop)
{
if(test_from_true==1){
result = pilot_tft_mvnorm_pca2(mu0_hat,mu1_hat,sigma_hat,n0_train,n1_train,n0_test,n1_test,x_remain,y_remain,pc_p1,pc_p2)
}else if(test_from_true==0){
result = pilot_tfe_mvnorm_pca2(mu0_hat,mu1_hat,sigma_hat,n0_train,n1_train,n0_test,n1_test)
}else if(test_from_true==2){
id0_train <- sample(id0,n0_train)
id1_train <- sample(id1,n1_train)
id_train <- c(id0_train,id1_train)
x_train <- as.matrix(x_data[id_train,])
y_train <- as.matrix(y_data[id_train])
id0_remain = setdiff(id0,id0_train)
id1_remain = setdiff(id1,id1_train)
id0_test <- sample(id0_remain,n0_test)
id1_test <- sample(id1_remain,n1_test)
id_test <- c(id0_test,id1_test)
x_test <- as.matrix(x_data[id_test,])
# y_test <- y_data[id_test]
result = pilot_train_pca2(x_train,y_train,x_test)
}
p.LR[L,] = result$p.LR
p.RF[L,] = result$p.RF
p.svm[L,] = result$p.svm
p.xgb[L,] = result$p.xgb
print(L)
}
# make sure that you mkdir the "result_bs" at first
file = paste0("./data/normal2_n0p",n0_p,"_esti_pilotseed",seed,"_n0",n0_train,"_test",test_from_true,".Rdata")
save(p.LR,p.RF,p.svm,p.xgb,test_y,file=file)
# L=20
# A = c(15,30,60,120,150)
# T_ = c(0,2)
# for(test_from_true in T_){
#   for(seed in 1:L){
#     for(n_train in A){
#       cat("R CMD BATCH --no-save --no-restore '--args seed=", seed, " n_train=", n_train," test_from_true=", test_from_true,"' real_mvnorm_pca2.R real_mvnorm_pca2.out &",'\n',sep='')
#     }
#   }
# }
#
# T_ = c(2)
# for(test_from_true in T_){
#   for(seed in 1:L){
#     cat("R CMD BATCH --no-save --no-restore '--args seed=", seed, " n_train=", 15," test_from_true=", test_from_true,"' mvt_normal.R mvt_normal.out &",'\n',sep='')
#   }
# }
rm(list=ls())
library(PRROC)
n0_p=15
Loop=20
args=(commandArgs(TRUE))
if(length(args)==0){
print("No arguments supplied.")
##supply default values
seed=1
n0_train=30 # 60 90 1200 4800
test_from_true = 0
}else{
for(i in 1:length(args)){
eval(parse(text=args[[i]]))
}
}
LR.auc <- RF.auc <- svm.auc <- xgb.auc <- matrix(rep(0,20*Loop),20)
for (seed in 1:2)
{
# seed = 1
for (k in 1: Loop)
{
cat("seed=",seed,",k=",k,"\n")
file = paste0("./data/normal2_n0p",n0_p,"_esti_pilotseed",seed,"_n0",n0_train,"_test",test_from_true,".Rdata")
load(file = file)
index0_test=which(test_y==0)
index1_test=which(test_y==1)
score.LR=p.LR[k,]
roc.LR<-roc.curve(scores.class0 =score.LR[index1_test],scores.class1=score.LR[index0_test],curve =FALSE)
LR.auc[seed,k]=roc.LR$auc
score.RF=p.RF[k,]
roc.RF<-roc.curve(scores.class0 =score.RF[index1_test],scores.class1=score.RF[index0_test],curve =FALSE)
RF.auc[seed,k]=roc.RF$auc
score.svm=p.svm[k,]
roc.svm<-roc.curve(scores.class0 =score.svm[index1_test],scores.class1=score.svm[index0_test],curve =FALSE)
svm.auc[seed,k]=roc.svm$auc
score.xgb=p.xgb[k,]
roc.xgb<-roc.curve(scores.class0 =score.xgb[index1_test],scores.class1=score.xgb[index0_test],curve =FALSE)
xgb.auc[seed,k]=roc.xgb$auc
}
}
file = paste0("./auc/t_normal_bs_n0p",n0_p,"_auc_n0",n0_train,"_test",test_from_true,".Rdata")
save(LR.auc,RF.auc,svm.auc, xgb.auc, file=file)
A = c(15,30,60,120,150)
T_ = c(2)
for(test_from_true in T_){
for(n_train in A){
cat("R CMD BATCH --no-save --no-restore '--args n0_train=", n_train, " test_from_true=", test_from_true,"' t_AUC.R t_AUC.out &",'\n',sep='')
}
}
#
# T_ = c(2)
# A = c(15)
# for(test_from_true in T_){
#   for(n_train in A){
#     cat("R CMD BATCH --no-save --no-restore '--args n0_train=", n_train, " test_from_true=", test_from_true,"' t_AUC.R t_AUC.out &",'\n',sep='')
#   }
# }
mean(LR.auc[1,])
mean(RF.auc[1,])
mean(svm.auc[1,])
mean(xgb.auc[1,])
View(LR.auc)
getwd()
load("D:/Dropbox/USC/RA/2020summer/ZM/pilot/pilot/real/mvnormal_pca2/auc/t_normal_bs_n0p15_auc_n0120_test0.Rdata")
View(LR.auc)
load("D:/Dropbox/USC/RA/2020summer/ZM/pilot/pilot/real/mvnormal_pca2/auc/t_normal_bs_n0p15_auc_n015_test0.Rdata")
View(LR.auc)
sum(LR.auc<0.5)
sum(LR.auc>0.5)
sum(LR.auc<0.5)
sum(RF.auc<0.5)
sum(svm.auc<0.5)
View(svm.auc)
sum(svm.auc<0.5)
mean(LR.auc)
load("D:/Dropbox/USC/RA/2020summer/R Package/Sample-Size-Determination/auc_res.Rdata")
n_train_sets = c(c(15,15),c(30,30),c(60,60),c(120,120),c(150,150))
model=c("svm","randomforest")
calculate_std_of_AUC_and_draw_plot(res,n_train_sets=n_train_sets, model=model)
library(SSD)
calculate_std_of_AUC_and_draw_plot(res,n_train_sets=n_train_sets, model=model)
calculate_std_of_AUC_and_draw_plot(res,n_train_sets=n_train_sets, model=model)
