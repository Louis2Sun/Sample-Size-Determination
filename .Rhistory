if(method[i] == "svm"){
data_trainxy<-data.frame(train_x,train_y=as.factor(train_y))
fit_svm<-svm(train_y~.,data=data_trainxy,probability=TRUE)
pred_svm <- predict(fit_svm, test_x, probability=TRUE,decision.values = TRUE)
p_svm=as.data.frame(attr(pred_svm, "probabilities"))$"1"
p_results=rbind(p_results,p_svm)
}
###RF
if(method[i] == "randomforest"){
data_trainxy<-data.frame(train_x,train_y=as.factor(train_y))
fit_RF<-randomForest(train_y~.,data = data_trainxy,importance=TRUE)
p_RF=predict(fit_RF,test_x,type = "prob")[, 2]
p_results=rbind(p_results,p_RF)
}
###Penalized logistic regression with LASSO penalty
if(method[i] == "penlog"){
fit_penlog = cv.glmnet(as.matrix(train_x), train_y, family = "binomial")
p_penlog = t(predict(fit_penlog$glmnet.fit, newx = as.matrix(test_x), type = "response", s = fit_penlog$lambda.min))
rownames(p_penlog)="p_penlog"
p_results=rbind(p_results,p_penlog)
}
###Linear Discriminant Analysis
if(method[i] == "lda"){
fit_lda = lda(as.matrix(train_x), train_y)
p_lda = predict(fit_lda, as.matrix(test_x))$posterior[, 2]
p_results=rbind(p_results,p_lda)
}
###Sparse Linear Discriminant Analysis with LASSO penalty
if(method[i] == "slda"){
n1 = sum(train_y==1)
n0 = sum(train_y==0)
n = n1 + n0
y_lda = train_y
y_lda[train_y == 0] = -n/n0
y_lda[train_y == 1] = n/n1
fit_slda = cv.glmnet(as.matrix(train_x), y_lda)
score_slda = t(predict(fit_slda$glmnet.fit, newx = as.matrix(test_x), type = "link", s = fit_slda$lambda.min))
p_slda = 1/(1+exp(-score_slda))
rownames(p_slda)="p_slda"
p_results=rbind(p_results,p_slda)
}
###Naive Bayes
if(method[i] == "nb"){
train_data_nb = data.frame(train_x, y = train_y)
fit_nb <- naive_bayes(as.factor(y) ~ ., data = train_data_nb, usekernel = FALSE)
p_nb = predict(fit_nb, data.frame(test_x), type = "prob")[,2]
p_results=rbind(p_results,p_nb)
}
###Nonparametric Naive Bayes
if(method[i] == "nnb"){
train_data_nnb = data.frame(train_x, y = train_y)
fit_nnb <- naive_bayes(as.factor(y) ~ ., data = train_data_nnb, usekernel = TRUE)
p_nnb = predict(fit_nnb, data.frame(test_x), type = "prob")[,2]
p_results=rbind(p_results,p_nnb)
}
###Ada-Boost
if(method[i] == "ada"){
train_data_ada = data.frame(train_x, y = train_y)
fit_ada = ada(y ~ ., data = train_data_ada)
p_ada = predict(fit_ada, data.frame(test_x), type = "probs")[, 2]
p_results=rbind(p_results,p_ada)
}
###Classification
if(method[i] == "tree"){
# train_y = as.factor(train_y)
train_data_tree = data.frame(train_x, y = train_y)
fit_tree = tree(y~ ., data = train_data_tree)
p_tree = predict(fit_tree, newdata = data.frame(test_x), type = 'vector')
p_results=rbind(p_results,p_tree)
}
###Self
if(method[i] == "self"){
p_self = func(train_x, train_y, test_x)
p_results=rbind(p_results,p_self)
}
}
return(p_results)
}
a = pilot_tfe_gaussian_copula_1(x_pilot, y_pilot, n0_train, n1_train, n0_test,
n1_test, method = c("self","svm","svm"),func = model_predict)
View(a)
View(a)
library(SSD)
library(SSD)
library(SSD)
library(SSD)
library(SSD)
library(SSD)
library(SSD)
library(SSD)
library(SSD)
predict_model <- function(x_train, y_train, x_test){
data_trainxy<-data.frame(x_train,y_train=as.factor(y_train))
fit_svm<-svm(y_train~.,data=data_trainxy,probability=TRUE)
pred_svm <- predict(fit_svm, x_test, probability=TRUE,decision.values = TRUE)
p_svm=as.data.frame(attr(pred_svm, "probabilities"))$"1"
return(p_svm)
}
result = pilot_tfe_gaussian_copula(x_pilot,y_pilot,n0_train,n1_train,n0_test,n1_test,method=c("self-defined","randomforest"),func=predict_model)
library(SSD)
library(mvtnorm)
library(MASS)
df = 10
rho = 0.5
d = 5
delta = rep(2, d)
H <- abs(outer(1:d, 1:d, "-"))
covxx = rho^H
n1_all <- n0_all <- 800
n1_p <- n0_p <- 15
x0_all = rmvt(n = n0_all, sigma = covxx, delta = rep(0, d), df = df)
x1_all = rmvt(n = n1_all, sigma = covxx, delta = delta, df = df)
x_data = rbind(x0_all, x1_all)
y_data = c(rep(0, n0_all), rep(1, n1_all))
id0 <- which(y_data == 0)
id1 <- which(y_data == 1)
id0_p <- sample(id0, n0_p)
id1_p <- sample(id1, n1_p)
id_p <- c(id0_p, id1_p)
x_pilot <- as.matrix(x_data[id_p, ])
y_pilot <- as.matrix(y_data[id_p])
n1_train <- n0_train <- n_train <- 60
n0_test <- n1_test <- 300
predict_model <- function(x_train, y_train, x_test){
data_trainxy<-data.frame(x_train,y_train=as.factor(y_train))
fit_svm<-svm(y_train~.,data=data_trainxy,probability=TRUE)
pred_svm <- predict(fit_svm, x_test, probability=TRUE,decision.values = TRUE)
p_svm=as.data.frame(attr(pred_svm, "probabilities"))$"1"
return(p_svm)
}
result = pilot_tfe_gaussian_copula(x_pilot,y_pilot,n0_train,n1_train,n0_test,n1_test,method=c("self-defined","randomforest"),func=predict_model)
methods_all = c("logistic", "penlog", "svm", "randomforest", "lda", "slda", "nb", "nnb", "ada", "tree","xgboost","self-defined")
if(!"self-defined" %in% methods_all){
stop('method \'',method[i], '\' cannot be found')
}
if(!"self-defined" %in% methods_all){
print('method \'',method[i], '\' cannot be found')
}
if(!"self-define2d" %in% methods_all){
print('method \'',method[i], '\' cannot be found')
}
if(!"self-defined" %in% methods_all){
print('method \'',method[i], '\' cannot be found')
}
library(SSD)
result = pilot_tfe_gaussian_copula(x_pilot,y_pilot,n0_train,n1_train,n0_test,n1_test,method=c("self-defined","randomforest"),func=predict_model)
result = pilot_tfe_gaussian_copula(x_pilot,y_pilot,n0_train,n1_train,n0_test,n1_test,method=c("svm","randomforest"),func=predict_model)
result = pilot_tfe_gaussian_copula(x_pilot,y_pilot,n0_train,n1_train,n0_test,n1_test,method=c("svm","svm"),func=predict_model)
View(result)
View(predict_model)
result = pilot_tfe_gaussian_copula(x_pilot,y_pilot,n0_train,n1_train,n0_test,n1_test,method=c("self-defined","svm"),func=predict_model)
library(SSD)
result = pilot_tfe_gaussian_copula(x_pilot,y_pilot,n0_train,n1_train,n0_test,n1_test,method=c("self","randomforest"),func=predict_model)
library(SSD)
result = pilot_tfe_gaussian_copula(x_pilot,y_pilot,n0_train,n1_train,n0_test,n1_test,method=c("self","randomforest"),func=predict_model)
library(randomForest)
result = pilot_tfe_gaussian_copula(x_pilot,y_pilot,n0_train,n1_train,n0_test,n1_test,method=c("self","randomforest"),func=predict_model)
View(result)
library(SSD)
library(mvtnorm)
library(MASS)
df = 10
rho = 0.5
d = 5
delta = rep(2, d)
H <- abs(outer(1:d, 1:d, "-"))
covxx = rho^H
n1_all <- n0_all <- 800
n1_p <- n0_p <- 15
x0_all = rmvt(n = n0_all, sigma = covxx, delta = rep(0, d), df = df)
x1_all = rmvt(n = n1_all, sigma = covxx, delta = delta, df = df)
x_data = rbind(x0_all, x1_all)
y_data = c(rep(0, n0_all), rep(1, n1_all))
id0 <- which(y_data == 0)
id1 <- which(y_data == 1)
id0_p <- sample(id0, n0_p)
id1_p <- sample(id1, n1_p)
id_p <- c(id0_p, id1_p)
x_pilot <- as.matrix(x_data[id_p, ])
y_pilot <- as.matrix(y_data[id_p])
n1_train <- n0_train <- n_train <- 60
n0_test <- n1_test <- 300
predict_model <- function(x_train, y_train, x_test){
data_trainxy<-data.frame(x_train,y_train=as.factor(y_train))
fit_svm<-svm(y_train~.,data=data_trainxy,probability=TRUE)
pred_svm <- predict(fit_svm, x_test, probability=TRUE,decision.values = TRUE)
p_svm=as.data.frame(attr(pred_svm, "probabilities"))$"1"
return(p_svm)
}
result = pilot_tfe_gaussian_copula(x_pilot,y_pilot,n0_train,n1_train,n0_test,n1_test,method=c("self","randomforest"),func=predict_model)
library(SSD)
result = pilot_tfe_gaussian_copula(x_pilot,y_pilot,n0_train,n1_train,n0_test,n1_test,method=c("self","randomforest"),func=predict_model)
library(SSD)
result = pilot_tfe_gaussian_copula(x_pilot,y_pilot,n0_train,n1_train,n0_test,n1_test,method=c("self","randomforest"),func=predict_model)
View(result)
result = pilot_tfe_gaussian_copula(x_pilot,y_pilot,n0_train,n1_train,n0_test,n1_test,method=c("self","ada"),func=predict_model)
View(result)
library(SSD)
library(mvtnorm)
library(MASS)
df = 10
rho = 0.5
d = 5
delta = rep(2, d)
H <- abs(outer(1:d, 1:d, "-"))
covxx = rho^H
n1_all <- n0_all <- 800
n1_p <- n0_p <- 15
x0_all = rmvt(n = n0_all, sigma = covxx, delta = rep(0, d), df = df)
x1_all = rmvt(n = n1_all, sigma = covxx, delta = delta, df = df)
x_data = rbind(x0_all, x1_all)
y_data = c(rep(0, n0_all), rep(1, n1_all))
id0 <- which(y_data == 0)
id1 <- which(y_data == 1)
id0_p <- sample(id0, n0_p)
id1_p <- sample(id1, n1_p)
id_p <- c(id0_p, id1_p)
x_pilot <- as.matrix(x_data[id_p, ])
y_pilot <- as.matrix(y_data[id_p])
n1_train <- n0_train <- n_train <- 60
n0_test <- n1_test <- 300
library(e1071)
predict_model <- function(x_train, y_train, x_test){
data_trainxy<-data.frame(x_train,y_train=as.factor(y_train))
fit_svm<-svm(y_train~.,data=data_trainxy,probability=TRUE)
pred_svm <- predict(fit_svm, x_test, probability=TRUE,decision.values = TRUE)
p_svm=as.data.frame(attr(pred_svm, "probabilities"))$"1"
return(p_svm)
}
result = pilot_tfe_mvnorm_pca2(x_pilot,y_pilot,n0_train,n1_train,n0_test,n1_test,method=c("self","randomforest"),func=predict_model)
library(SSD)
result = pilot_tfe_mvnorm_pca2(x_pilot,y_pilot,n0_train,n1_train,n0_test,n1_test,method=c("self","randomforest"),func=predict_model)
View(result)
View(result)
library(SSD)
library(SSD)
library(mvtnorm)
library(MASS)
df = 10
rho = 0.5
d = 5
delta = rep(2, d)
H <- abs(outer(1:d, 1:d, "-"))
covxx = rho^H
n1_all <- n0_all <- 800
n1_train <- n0_train <- n_train <- 60
n0_test <- n1_test <- 300
x0_all = rmvt(n = n0_all, sigma = covxx, delta = rep(0, d), df = df)
x1_all = rmvt(n = n1_all, sigma = covxx, delta = delta, df = df)
x_data = rbind(x0_all, x1_all)
y_data = c(rep(0, n0_all), rep(1, n1_all))
id0 <- which(y_data == 0)
id1 <- which(y_data == 1)
id0_train <- sample(id0, n0_train)
id1_train <- sample(id1, n1_train)
id_train <- c(id0_train, id1_train)
x_train <- as.matrix(x_data[id_train, ])
y_train <- as.matrix(y_data[id_train])
id0_remain = setdiff(id0, id0_train)
id1_remain = setdiff(id1, id1_train)
id0_test <- sample(id0_remain, n0_test)
id1_test <- sample(id1_remain, n1_test)
id_test <- c(id0_test, id1_test)
x_test <- as.matrix(x_data[id_test, ])
library(e1071)
predict_model <- function(x_train, y_train, x_test){
data_trainxy<-data.frame(x_train,y_train=as.factor(y_train))
fit_svm<-svm(y_train~.,data=data_trainxy,probability=TRUE)
pred_svm <- predict(fit_svm, x_test, probability=TRUE,decision.values = TRUE)
p_svm=as.data.frame(attr(pred_svm, "probabilities"))$"1"
return(p_svm)
}
result = pilot_train_pca2(x_pilot,y_pilot,n0_train,n1_train,n0_test,n1_test,method=c("self","randomforest"),func=predict_model)
library(SSD)
result = pilot_train_pca2(x_train,y_train,x_test,method=c("svm","randomforest"),func=predict_model)
View(result)
result = pilot_train_pca2(x_train,y_train,x_test,method=c("self","randomforest"),func=predict_model)
View(result)
result = pilot_train(x_train,y_train,x_test,method=c("self","randomforest"),func=predict_model)
library(SSD)
result = pilot_train(x_train,y_train,x_test,method=c("self","randomforest"),func=predict_model)
View(result)
library(SSD)
AUC = calculate_AUC_base(n01_p=c(15,15), n01_test=c(300,300), n_train_sets = c(c(15,15),c(30,30),c(60,60),c(120,120),c(150,150)), seed=1, model=c("svm","randomforest"),func=predict_model)
AUC = calculate_AUC_base(n01_p=c(15,15), n01_test=c(300,300), n_train_sets = c(c(15,15),c(30,30),c(60,60),c(120,120),c(150,150)), seed=1, model=c("self","randomforest"),func=predict_model)
AUC
library(SSD)
library(SSD)
library(SSD)
library(e1071)
predict_model <- function(x_train, y_train, x_test){
data_trainxy<-data.frame(x_train,y_train=as.factor(y_train))
fit_svm<-svm(y_train~.,data=data_trainxy,probability=TRUE)
pred_svm <- predict(fit_svm, x_test, probability=TRUE,decision.values = TRUE)
p_svm=as.data.frame(attr(pred_svm, "probabilities"))$"1"
return(p_svm)
}
getwd()
getwd()
library(e1071)
predict_model <- function(x_train, y_train, x_test){
data_trainxy<-data.frame(x_train,y_train=as.factor(y_train))
fit_svm<-svm(y_train~.,data=data_trainxy,probability=TRUE)
pred_svm <- predict(fit_svm, x_test, probability=TRUE,decision.values = TRUE)
p_svm=as.data.frame(attr(pred_svm, "probabilities"))$"1"
return(p_svm)
}
calculate_AUCs(n01_all= c(800,800), n01_p=c(15,15), n_train_sets = c(c(15,15),c(30,30),c(60,60),c(120,120),c(150,150)), n01_test=c(300,300), num_of_seeds=20, random_seeds=FALSE, model=c("self","randomforest"), func=predict_model, calculate_std_of_AUC_and_produce_plot=TRUE)
library(SSD)
calculate_AUCs(n01_all= c(800,800), n01_p=c(15,15), n_train_sets = c(c(15,15),c(30,30),c(60,60),c(120,120),c(150,150)), n01_test=c(300,300), num_of_seeds=20, random_seeds=FALSE, model=c("self","randomforest"), func=predict_model, calculate_std_of_AUC_and_produce_plot=TRUE)
predict_model
n01_all= c(800,800), n01_p=c(15,15), n_train_sets = c(c(15,15),c(30,30),c(60,60),c(120,120),c(150,150)), n01_test=c(300,300), num_of_seeds=20, random_seeds=TRUE, seeds=NULL, calculate_std_of_AUC_and_produce_plot=FALSE, method="pca2_mvnorm", ncores = NULL, model=c("svm","randomforest"), func=NULL, data_generation=list(dist="t-distribution",sigma=list(class_0=diag(5),class_1=diag(5)),df=c(10,10),delta=c(rep(0,5),rep(2,5)))
n01_all= c(800,800)
n01_p=c(15,15)
n_train_sets = c(c(15,15),c(30,30),c(60,60),c(120,120),c(150,150))
n01_test=c(300,300)
num_of_seeds=20
seeds=NULL
calculate_std_of_AUC_and_produce_plot=TRUE
method="pca2_mvnorm"
ncores = NULL
model=c("svm","randomforest")
func=NULL
data_generation=list(dist="t-distribution",sigma=list(class_0=diag(5),class_1=diag(5)),df=c(10,10),delta=c(rep(0,5),rep(2,5)))
calculate_AUC_base(n01_all=n01_all, n01_p=n01_p, n_train_sets=n_train_sets, n01_test=n01_test, seed=x, method=method, model=model,func=predict_model, data_generation=data_generation
)
calculate_AUC_base(n01_all=n01_all, n01_p=n01_p, n_train_sets=n_train_sets, n01_test=n01_test, seed=1, method=method, model=model,func=predict_model, data_generation=data_generation)
warnings()
library(SSD)
library(e1071)
predict_model <- function(x_train, y_train, x_test){
data_trainxy<-data.frame(x_train,y_train=as.factor(y_train))
fit_svm<-svm(y_train~.,data=data_trainxy,probability=TRUE)
pred_svm <- predict(fit_svm, x_test, probability=TRUE,decision.values = TRUE)
p_svm=as.data.frame(attr(pred_svm, "probabilities"))$"1"
return(p_svm)
}
calculate_AUCs(n01_all= c(800,800), n01_p=c(15,15), n_train_sets = c(c(15,15),c(30,30),c(60,60),c(120,120),c(150,150)), n01_test=c(300,300), num_of_seeds=20, random_seeds=FALSE, model=c("self","randomforest"), func=predict_model, calculate_std_of_AUC_and_produce_plot=TRUE)
library(SSD)
calculate_AUCs(n01_all= c(800,800), n01_p=c(15,15), n_train_sets = c(c(15,15),c(30,30),c(60,60),c(120,120),c(150,150)), n01_test=c(300,300), num_of_seeds=20, random_seeds=FALSE, model=c("self","randomforest"), func=predict_model, calculate_std_of_AUC_and_produce_plot=TRUE)
library(SSD)
calculate_AUCs(n01_all= c(800,800), n01_p=c(15,15), n_train_sets = c(c(15,15),c(30,30),c(60,60),c(120,120),c(150,150)), n01_test=c(300,300), num_of_seeds=20, random_seeds=FALSE, model=c("self","randomforest"), func=predict_model, calculate_std_of_AUC_and_produce_plot=TRUE)
a = "e1071"
p = c("e1071","randomForrest")
p = c(e1071,randomForrest)
p = c(library(e1071),library(randomForrest))
p = c(library(e1071),library(randomForest))
cl <- makeCluster(getOption("cl.cores", clnum));
clnum <- 5
cl <- makeCluster(getOption("cl.cores", clnum));
View(cl)
clusterEvalQ(cl, c(library(SSD),p))
p
a = library(e1071)
c(library(SSD))
c(library(SSD),a)
c(library(SSD),p)
clusterEvalQ(cl, c(library(SSD),p))
clusterEvalQ(cl, c(library(SSD),a))
clusterEvalQ(cl, c(library(SSD),library(e1071)))
clusterEvalQ(cl, a)
clusterExport(cl, c("calculate_AUC_base","func"),
envir=environment())
clusterExport(cl, "p")
clusterEvalQ(cl, c(library(SSD),p))
library(SSD)
library(SSD)
getwd()
library()
library(SSD)
predict_model <- function(x_train, y_train, x_test){
data_trainxy<-data.frame(x_train,y_train=as.factor(y_train))
fit_svm<-svm(y_train~.,data=data_trainxy,probability=TRUE)
pred_svm <- predict(fit_svm, x_test, probability=TRUE,decision.values = TRUE)
p_svm=as.data.frame(attr(pred_svm, "probabilities"))$"1"
return(p_svm)
}
calculate_AUCs(n01_all= c(800,800), n01_p=c(15,15), n_train_sets = c(c(15,15),c(30,30),c(60,60),c(120,120),c(150,150)), n01_test=c(300,300), num_of_seeds=20, random_seeds=FALSE, model=c("self","randomforest"), func=predict_model, package_imported=c(library(e1071)), calculate_std_of_AUC_and_produce_plot=TRUE)
package_imported=c(library(e1071))
clnum =1
cl <- makeCluster(getOption("cl.cores", clnum))
clusterExport(cl, "package_imported")
clusterEvalQ(cl, c(library(SSD),package_imported))
clusterExport(cl, c("calculate_AUC_base","func"),
envir=environment())
func = predict_model()
func = predict_model
clusterExport(cl, c("calculate_AUC_base","func"),
envir=environment())
calculate_AUCs(n01_all= c(800,800), n01_p=c(15,15), n_train_sets = c(c(15,15),c(30,30),c(60,60),c(120,120),c(150,150)), n01_test=c(300,300), num_of_seeds=20, random_seeds=FALSE, model=c("self","randomforest"), func=predict_model, package_imported=c(library(e1071)), calculate_std_of_AUC_and_produce_plot=TRUE)
package_imported
library(SSD)
calculate_AUCspredict_model <- function(x_train, y_train, x_test){
data_trainxy<-data.frame(x_train,y_train=as.factor(y_train))
fit_svm<-svm(y_train~.,data=data_trainxy,probability=TRUE)
pred_svm <- predict(fit_svm, x_test, probability=TRUE,decision.values = TRUE)
p_svm=as.data.frame(attr(pred_svm, "probabilities"))$"1"
return(p_svm)
}
predict_model <- function(x_train, y_train, x_test){
data_trainxy<-data.frame(x_train,y_train=as.factor(y_train))
fit_svm<-svm(y_train~.,data=data_trainxy,probability=TRUE)
pred_svm <- predict(fit_svm, x_test, probability=TRUE,decision.values = TRUE)
p_svm=as.data.frame(attr(pred_svm, "probabilities"))$"1"
return(p_svm)
}
calculate_AUCs(n01_all= c(800,800), n01_p=c(15,15), n_train_sets = c(c(15,15),c(30,30),c(60,60),c(120,120),c(150,150)), n01_test=c(300,300), num_of_seeds=20, random_seeds=FALSE, model=c("self","randomforest"), func=predict_model, package_imported=c(library(e1071)), calculate_std_of_AUC_and_produce_plot=TRUE)
package_imported
library(SSD)
calculate_AUCs(n01_all= c(800,800), n01_p=c(15,15), n_train_sets = c(c(15,15),c(30,30),c(60,60),c(120,120),c(150,150)), n01_test=c(300,300), num_of_seeds=20, random_seeds=FALSE, model=c("self","randomforest"), func=predict_model, package_imported=c(library(e1071)), calculate_std_of_AUC_and_produce_plot=TRUE)
library(SSD)
calculate_AUCs(n01_all= c(800,800), n01_p=c(15,15), n_train_sets = c(c(15,15),c(30,30),c(60,60),c(120,120),c(150,150)), n01_test=c(300,300), num_of_seeds=20, random_seeds=FALSE, model=c("self","randomforest"), func=predict_model, package_imported=c(library(e1071)), calculate_std_of_AUC_and_produce_plot=TRUE)
library(SSD)
calculate_AUCs(n01_all= c(800,800), n01_p=c(15,15), n_train_sets = c(c(15,15),c(30,30),c(60,60),c(120,120),c(150,150)), n01_test=c(300,300), num_of_seeds=20, random_seeds=FALSE, model=c("self","randomforest"), func=predict_model, package_imported=c(library(e1071)), calculate_std_of_AUC_and_produce_plot=TRUE)
library(SSD)
calculate_AUCs(n01_all= c(800,800), n01_p=c(15,15), n_train_sets = c(c(15,15),c(30,30),c(60,60),c(120,120),c(150,150)), n01_test=c(300,300), num_of_seeds=20, random_seeds=FALSE, model=c("self","randomforest"), func=predict_model, package_imported=c(library(e1071)), calculate_std_of_AUC_and_produce_plot=TRUE)
library(SSD)
calculate_AUCs(n01_all= c(800,800), n01_p=c(15,15), n_train_sets = c(c(15,15),c(30,30),c(60,60),c(120,120),c(150,150)), n01_test=c(300,300), num_of_seeds=20, random_seeds=FALSE, model=c("self","randomforest"), func=predict_model, package_imported=c(library(e1071)), calculate_std_of_AUC_and_produce_plot=TRUE)
package_imported=c(library(e1071))
calculate_AUCs(n01_all= c(800,800), n01_p=c(15,15), n_train_sets = c(c(15,15),c(30,30),c(60,60),c(120,120),c(150,150)), n01_test=c(300,300), num_of_seeds=20, random_seeds=FALSE, model=c("self","randomforest"), func=predict_model, package_imported=c(library(e1071)), calculate_std_of_AUC_and_produce_plot=TRUE)
library(SSD)
warnings()
calculate_AUCs(n01_all= c(800,800), n01_p=c(15,15), n_train_sets = c(c(15,15),c(30,30),c(60,60),c(120,120),c(150,150)), n01_test=c(300,300), num_of_seeds=20, random_seeds=FALSE, model=c("self","randomforest"), func=predict_model, package_imported=c(library(e1071)), calculate_std_of_AUC_and_produce_plot=TRUE)
library(SSD)
calculate_AUCs(n01_all= c(800,800), n01_p=c(15,15), n_train_sets = c(c(15,15),c(30,30),c(60,60),c(120,120),c(150,150)), n01_test=c(300,300), num_of_seeds=20, random_seeds=FALSE, model=c("self","randomforest"), func=predict_model, package_imported=c(library(e1071)), calculate_std_of_AUC_and_produce_plot=TRUE)
library(SSD)
predict_model <- function(x_train, y_train, x_test){
data_trainxy<-data.frame(x_train,y_train=as.factor(y_train))
fit_svm<-svm(y_train~.,data=data_trainxy,probability=TRUE)
pred_svm <- predict(fit_svm, x_test, probability=TRUE,decision.values = TRUE)
p_svm=as.data.frame(attr(pred_svm, "probabilities"))$"1"
return(p_svm)
}
calculate_AUCs(n01_all= c(800,800), n01_p=c(15,15), n_train_sets = c(c(15,15),c(30,30),c(60,60),c(120,120),c(150,150)), n01_test=c(300,300), num_of_seeds=20, random_seeds=FALSE, model=c("self","randomforest"), func=predict_model, package_imported=c(library(e1071)), calculate_std_of_AUC_and_produce_plot=TRUE)
package_imported=c(library(e1071))
func = predict_model
library(SSD)
library(e1071)
calculate_AUCs(n01_all= c(800,800), n01_p=c(15,15), n_train_sets = c(c(15,15),c(30,30),c(60,60),c(120,120),c(150,150)), n01_test=c(300,300), num_of_seeds=20, random_seeds=FALSE, model=c("self","randomforest"), func=predict_model, package_imported=c(library(e1071)), calculate_std_of_AUC_and_produce_plot=TRUE)
View(predict_model)
library(SSD)
calculate_AUCs(n01_all= c(800,800), n01_p=c(15,15), n_train_sets = c(c(15,15),c(30,30),c(60,60),c(120,120),c(150,150)), n01_test=c(300,300), num_of_seeds=20, random_seeds=FALSE, model=c("self","randomforest"), func=predict_model, package_imported=c(library(e1071)), calculate_std_of_AUC_and_produce_plot=TRUE)
library(SSD)
calculate_AUCs(n01_all= c(800,800), n01_p=c(15,15), n_train_sets = c(c(15,15),c(30,30),c(60,60),c(120,120),c(150,150)), n01_test=c(300,300), num_of_seeds=20, random_seeds=FALSE, model=c("self","randomforest"), func=predict_model, package_imported=c(library(e1071)), calculate_std_of_AUC_and_produce_plot=TRUE)
getwd()
c(library(SSD),library(e1071))
library(e1071)
library("e1071")
c(library(SSD),library("e1071"))
package_imported
c(library(SSD),package_imported)
c(library(SSD),library("e1071"))
package_imported = c(library(e1071))
c(library(SSD),package_imported)
environment()
library(SSD)
calculate_AUCs
calculate_AUCspredict_model <- function(x_train, y_train, x_test){
data_trainxy<-data.frame(x_train,y_train=as.factor(y_train))
fit_svm<-svm(y_train~.,data=data_trainxy,probability=TRUE)
pred_svm <- predict(fit_svm, x_test, probability=TRUE,decision.values = TRUE)
p_svm=as.data.frame(attr(pred_svm, "probabilities"))$"1"
return(p_svm)
}
calculate_AUCs(n01_all= c(800,800), n01_p=c(15,15), n_train_sets = c(c(15,15),c(30,30),c(60,60),c(120,120),c(150,150)), n01_test=c(300,300), num_of_seeds=20, random_seeds=FALSE, model=c("self","randomforest"), func=predict_model, package_imported=c(library(e1071)), calculate_std_of_AUC_and_produce_plot=TRUE)
library(SSD)
calculate_AUCs(n01_all= c(800,800), n01_p=c(15,15), n_train_sets = c(c(15,15),c(30,30),c(60,60),c(120,120),c(150,150)), n01_test=c(300,300), num_of_seeds=20, random_seeds=FALSE, model=c("self","randomforest"), func=predict_model, package_imported=c(library(e1071)), calculate_std_of_AUC_and_produce_plot=TRUE)
library(SSD)
calculate_AUCs(n01_all= c(800,800), n01_p=c(15,15), n_train_sets = c(c(15,15),c(30,30),c(60,60),c(120,120),c(150,150)), n01_test=c(300,300), num_of_seeds=20, random_seeds=FALSE, model=c("self","randomforest"), func=predict_model, package_imported=c(library(e1071)), calculate_std_of_AUC_and_produce_plot=TRUE)
library(SSD)
calculate_AUCs(n01_all= c(800,800), n01_p=c(15,15), n_train_sets = c(c(15,15),c(30,30),c(60,60),c(120,120),c(150,150)), n01_test=c(300,300), num_of_seeds=20, random_seeds=FALSE, model=c("self","randomforest"), func=predict_model, package_imported=c(library(e1071)), calculate_std_of_AUC_and_produce_plot=TRUE)
predict_model <- function(x_train, y_train, x_test){
data_trainxy<-data.frame(x_train,y_train=as.factor(y_train))
fit_svm<-svm(y_train~.,data=data_trainxy,probability=TRUE)
pred_svm <- predict(fit_svm, x_test, probability=TRUE,decision.values = TRUE)
p_svm=as.data.frame(attr(pred_svm, "probabilities"))$"1"
return(p_svm)
}
calculate_AUCs(n01_all= c(800,800), n01_p=c(15,15), n_train_sets = c(c(15,15),c(30,30),c(60,60),c(120,120),c(150,150)), n01_test=c(300,300), num_of_seeds=20, random_seeds=FALSE, model=c("self","randomforest"), func=predict_model, package_imported=c(library(e1071)), calculate_std_of_AUC_and_produce_plot=TRUE)
library(SSD)
calculate_AUCs(n01_all= c(800,800), n01_p=c(15,15), n_train_sets = c(c(15,15),c(30,30),c(60,60),c(120,120),c(150,150)), n01_test=c(300,300), num_of_seeds=20, random_seeds=FALSE, model=c("self","randomforest"), func=predict_model, package_imported=c(library(e1071)), calculate_std_of_AUC_and_produce_plot=TRUE)
library(SSD)
calculate_AUCs(n01_all= c(800,800), n01_p=c(15,15), n_train_sets = c(c(15,15),c(30,30),c(60,60),c(120,120),c(150,150)), n01_test=c(300,300), num_of_seeds=20, random_seeds=FALSE, model=c("self","randomforest"), func=predict_model, package_imported=c(library(e1071)), calculate_std_of_AUC_and_produce_plot=TRUE)
package_imported=c("e1071")
library(package_imported)
require(package_imported)
library(package_imported,character.only = TRUE)
getwd()
library(SSD)
library(SSD)
predict_model <- function(x_train, y_train, x_test){
data_trainxy<-data.frame(x_train,y_train=as.factor(y_train))
fit_svm<-svm(y_train~.,data=data_trainxy,probability=TRUE)
pred_svm <- predict(fit_svm, x_test, probability=TRUE,decision.values = TRUE)
p_svm=as.data.frame(attr(pred_svm, "probabilities"))$"1"
return(p_svm)
}
getwd()
calculate_AUCs(n01_all= c(800,800), n01_p=c(15,15), n_train_sets = c(c(15,15),c(30,30),c(60,60),c(120,120),c(150,150)), n01_test=c(300,300), num_of_seeds=20, random_seeds=FALSE, model=c("self","randomforest"), func=predict_model, package_imported=c(library(e1071)), calculate_std_of_AUC_and_produce_plot=TRUE)
package_imported
package_imported=c("e1071")
package_imported
package_imported[1]
length(package_imported)
library(SSD)
calculate_AUCs(n01_all= c(800,800), n01_p=c(15,15), n_train_sets = c(c(15,15),c(30,30),c(60,60),c(120,120),c(150,150)), n01_test=c(300,300), num_of_seeds=20, random_seeds=FALSE, model=c("self","randomforest"), func=predict_model, package_imported=c("e1071"), calculate_std_of_AUC_and_produce_plot=TRUE)
library(SSD)
calculate_AUCs(n01_all= c(800,800), n01_p=c(15,15), n_train_sets = c(c(15,15),c(30,30),c(60,60),c(120,120),c(150,150)), n01_test=c(300,300), num_of_seeds=20, random_seeds=FALSE, model=c("self","randomforest"), func=predict_model, package_imported=c("e1071"), calculate_std_of_AUC_and_produce_plot=TRUE)
getwd()
calculate_AUCs(n01_all= c(800,800), n01_p=c(15,15), n_train_sets = c(c(15,15),c(30,30),c(60,60),c(120,120),c(150,150)), n01_test=c(300,300), num_of_seeds=20, random_seeds=FALSE, model=c("self","randomforest"), func=predict_model, package_imported=c("e1071","randomForest"), calculate_std_of_AUC_and_produce_plot=TRUE)
getwd()
calculate_AUCs(n01_all= c(800,800), n01_p=c(15,15), n_train_sets = c(c(15,15),c(30,30),c(60,60),c(120,120),c(150,150)), n01_test=c(300,300), num_of_seeds=20, random_seeds=FALSE, model=c("self","randomforest"), func=predict_model, package_imported=c("e1071","randomForest"), calculate_std_of_AUC_and_produce_plot=TRUE)
